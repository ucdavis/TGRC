@model TGRC.Models.AccessionMapViewModel

<h1> Display Maps of Wild Species Collection Sites</h1>
<br>

<form method="post" asp-action="Maps">
    <input type="hidden" name="Search" id="Search" value="true">   
    <div class="row col-sm-12">        
            <table>
                <tr>
                    <th>Country</th>
                    <th>Province</th>
                    <th>Status</th>
                    <th>Elevation (m) &dagger;</th>
                    <th></th>
                </tr>
                <tr>
                    <td valign="top"><select asp-for="CountrySelected" class="form-select form-select-sm">
                                <option value="[Any]">[Any]</option> 
                                <option value="Chile">Chile</option> 
                                <option value="Colombia">Colombia</option> 
                                <option value="Ecuador">Ecuador</option> 
                                <option value="Peru">Peru</option>   
                        </select>
                    </td>
                    <td valign="top"><select asp-for="ProvinceSelected" class="form-select form-select-sm" asp-items="@(new SelectList(Model.ProvinceList))"></select></td>
                    <td valign="top"><select asp-for="StatusSelected" class="form-select form-select-sm">
                            <option value="[Any]">[Any]</option>
                            <option value="Active">Active</option>
                            <option value="Inactive">Inactive</option>
                            <option value="Unavailable">Unavailable</option>
                        <option value="Non-distributable">Non-distributable</option>
                        </select>
                    </td>
                    <td valign="top">Min<input type="number" asp-for="minElevation" style="width: 65px">
                    Max<input type="number" asp-for="maxElevation" style="width: 65px"></td>           
                    <td valign="top"><input type="submit" class="btn btn-primary" value="Create Map/Table"> | 
            <a asp-action="Maps" class="btn btn-dark">Clear</a></td>
                </tr>
            </table>      
    </div>
   
<div class="container col-sm-12 row ">
    <div class="col-sm-3 ">
        @for (var index = 0; index < @Model.Species.Count(); index++)
        {
            <div><input type="checkbox" asp-for="@Model.Species[index].IsChecked" class="form-check-input" /> 
            <label class="form-check-label" asp-for="@Model.Species[index].IsChecked">
                <img src="~/siteImages/@Model.Species[index].Icon"> @Model.Species[index].Name
                </label>
            <input type="hidden" asp-for="@Model.Species[index].Name" />
            <input type="hidden" asp-for="@Model.Species[index].Icon" />
            </div>            
        }  
        </ul>
        <br>
        
        <br>
        <img src="~/siteImages/multi.JPG"> = Two or more species at the same site
    </div>
    <div class="col-sm-9 embed-responsive">
        @if(Model.MarkerCount > 0)
        {
            <text>Plotting @Model.MarkerCount point(s)...click on a point reference for details.</text>
        }
        <div id="map" class="embed-responsive-item embed-responsive-4by3" style="min-height: 800px; min-width: 600px">
        </div>
    </div> 
    <div>
        <b>&dagger;</b>Min = collections at or above, Max = collections at or below specified elevation(s).
    </div>   
</div>
</form>
@if(Model.accessions.Any())
{
<div class="container col-sm-8 text-center">
    <button class="btn btn-info" type="button" data-bs-toggle="collapse" data-bs-target="#tableCollapse" aria-expanded="false" aria-controls="tableCollapse">
        Show Table
    </button> 
</div>
<div class="col-sm-12 container collapse" id="tableCollapse">
    <table class="table datatable">
        <thead>
            <th>Accession</th>
            <th>Status</th>
            <th>Coll. No.</th>
            <th>Coll. Date (m-d-y)</th>
            <th>Taxon</th>
            <th>Collection Site</th>
            <th>Site details</th>
            <th>Province/Department</th>
            <th>Country</th>
            <th>Elevation (m)</th> 
            <th>Lat</th>
            <th>Long</th>
            <th>Pop. Size</th>
            <th>Sample Size</th>
            <th>Coll. notes</th>
        </thead>    
        <tbody>
            @foreach (var acc in Model.accessions)
            {
                <tr>
                    <td>
                        <a asp-action="detail" asp-controller="Accession" asp-route-id="@acc.AccessionNum">@acc.AccessionNum</a><br>
                    </td>
                    <td>@acc.Status</td>
                    <td>@acc.CollectionNum</td>
                    <td>@acc.CollectionDateCombined</td>
                    <td>@acc.Taxon2</td>
                    <td><div class="scrollableCell" style="min-width: 150px;">@acc.CollectionSite</div></td>
                    <td><div class="scrollableCell" style="min-width: 150px;">@acc.SiteDetails</div></td>
                    <td>@acc.ProvinceOrDepartment</td>
                    <td>@acc.Country</td>
                    <td>@acc.Elevation</td>
                    <td>@acc.LatDec</td>
                    <td>@acc.LonDec</td>
                    <td>@acc.PopulationSize</td>
                    <td>@acc.SampleSize</td>
                    <td><div class="scrollableCell" style="min-width: 200px;">@acc.CollectionNotes</div></td>
                </tr>                
            }
        </tbody>
    </table>
</div>
}


@section Scripts {

    <script>
        (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
            key: "@ViewBag.APIKey",
            v: "weekly",
        });
    </script>
    <script src="https://cdn.datatables.net/1.13.2/js/jquery.dataTables.min.js"></script>   
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.2/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.3.4/css/buttons.dataTables.min.css" />
    <script src="https://cdn.datatables.net/buttons/2.3.4/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.3.4/js/buttons.html5.min.js"></script>
    
   
    <script type="text/Javascript">
        var locations = [@Html.Raw(Model.Markers)]
        //console.log(locations);

        $( document ).ready(function() {           
            
             $('.datatable').DataTable({
                dom: 'Bfrtip',
                buttons: [ 'csvHtml5'],
                "paging": false,
            });          

            $("#CountrySelected").change(function() {
               var country = $("#CountrySelected").val();
               if(country != "[Any]") 
               {
                    $.ajax({  
                    type: "get",  
                    url: "/Accession/ProvinceListForCountry/" + country,  
                    //data: { stateId: $('#ddlState').val() },  
                    datatype: "json",  
                    traditional: true,  
                    success: function (data) {  
                        var provinces = "";  
                        for (var i = 0; i < data.length; i++)  
                        {  
                            provinces = provinces + '<option value=' + data[i] + '>' + data[i] + '</option>';  
                        }                      
                        $('#ProvinceSelected').html(provinces);  
                    }  
                    });  
               }
            });     
        });

        let map;
        async function initMap() {
            const { Map } = await google.maps.importLibrary("maps");
            const { AdvancedMarkerElement, PinElement } = await google.maps.importLibrary("marker");

            map = new Map(document.getElementById("map"), {
                center: { lat: 0, lng: 180 },
                zoom: 10,
                streetViewControl: false,
                mapId: "GISMap",
            });

            // const test = new PinElement({
            //     background: "#000000",
            //     glyph: `*`,
            //     glyphColor: "#FFFFFF",
            // });
            // pin = new AdvancedMarkerElement({
            //     position: { lat: 0, lng: 180 },
            //     map: map,
            //     content: test.element,
            //     zIndex: 0,
            // });

            const infowindow = new google.maps.InfoWindow();

            var bounds = new google.maps.LatLngBounds();

            for (i = 0; i < locations.length; i++) {
                posit = { lat: locations[i][1], lng: locations[i][2] };
                const pinRedBackground = new PinElement({
                    background: "#FF0000",
                    glyph: `*`,
                    glyphColor: "black",
                });
                const Sarcanum = new PinElement({
                    background: "#FF0000",
                    glyph: `A`,
                    glyphColor: "#000000",
                });
                const Scheesmaniae = new PinElement({
                    background: "#FFF000",
                    glyph: `C`,
                    glyphColor: "#FF0000",
                });
                const Schilense = new PinElement({
                    background: "#00FF99",
                    glyph: `C`,
                    glyphColor: "#000000",
                });
                const Schmielewskii = new PinElement({
                    background: "#E6E6E6",
                    glyph: `C`,
                    glyphColor: "#FF0000",
                });
                const Scorneliomulleri = new PinElement({
                    background: "#87CEEB",
                    glyph: `C`,
                    glyphColor: "#000000",
                });
                const Sgalapagense = new PinElement({
                    background: "#FF0000",
                    glyph: `G`,
                    glyphColor: "#000000",
                });
                const Shabrochaites = new PinElement({
                    background: "#FFF000",
                    glyph: `H`,
                    glyphColor: "#FF0000",
                });
                const Shuaylasense = new PinElement({
                    background: "#00FF99",
                    glyph: `H`,
                    glyphColor: "#000000",
                });
                const Sjuglandifolium = new PinElement({
                    background: "#FF0000",
                    glyph: `J`,
                    glyphColor: "#000000",
                });
                const Slycopersicoides = new PinElement({
                    background: "#FFF000",
                    glyph: `L`,
                    glyphColor: "#FF0000",
                });
                const Slycopersicum = new PinElement({
                    background: "#E5FFE5",
                    glyph: `L`,
                    glyphColor: "#000000",
                });
                const Slycopersicumvarcerasiforme = new PinElement({
                    background: "#E5FFE5",
                    glyph: `C`,
                    glyphColor: "#000000",
                });
                const Sneorickii = new PinElement({
                    background: "#FF0000",
                    glyph: `N`,
                    glyphColor: "#000000",
                });
                const Sochranthum = new PinElement({
                    background: "#FF0000",
                    glyph: `O`,
                    glyphColor: "#000000",
                });
                const Spennellii = new PinElement({
                    background: "#FFF000",
                    glyph: `P`,
                    glyphColor: "#FF0000",
                });
                const Speruvianum = new PinElement({
                    background: "#00FF99",
                    glyph: `P`,
                    glyphColor: "#000000",
                });
                const Spimpinellifolium = new PinElement({
                    background: "#E6E6E6",
                    glyph: `P`,
                    glyphColor: "#FF0000",
                });
                const Ssitiens = new PinElement({
                    background: "#FF0000",
                    glyph: `S`,
                    glyphColor: "#000000",
                });
                const multi = new PinElement({
                    background: "#000000",
                    glyph: `*`,
                    glyphColor: "#FFFFFF",
                });

                if (locations[i][3] === 'S. sitiens') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Ssitiens.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'multi') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: multi.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. pennellii') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Spennellii.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. peruvianum') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Speruvianum.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. pimpinellifolium') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Spimpinellifolium.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. arcanum') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Sarcanum.element,                        
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. cheesmaniae') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Scheesmaniae.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. chilense') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Schilense.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. chmielewskii') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Schmielewskii.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. corneliomulleri') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Scorneliomulleri.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. galapagense') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Sgalapagense.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. habrochaites') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Shabrochaites.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. huaylasense') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Shuaylasense.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. juglandifolium') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Sjuglandifolium.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. lycopersicoides') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Slycopersicoides.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. lycopersicum') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Slycopersicum.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. lycopersicum var. cerasiforme') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Slycopersicumvarcerasiforme.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. neorickii') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Sneorickii.element,
                        zIndex: i,
                    });
                }
                if (locations[i][3] === 'S. ochranthum') {
                    pin = new AdvancedMarkerElement({
                        position: posit,
                        map: map,
                        content: Sochranthum.element,
                        zIndex: i,
                    });
                }

                bounds.extend(posit);
                google.maps.event.addListener(pin, 'click', (function (marker, i) {
                    return function () {
                        infowindow.setContent(locations[i][0]);
                        infowindow.open(map, marker);
                    }
                })(pin, i));
            }
            map.fitBounds(bounds);
        }
        initMap();        
    </script>
    
    
}